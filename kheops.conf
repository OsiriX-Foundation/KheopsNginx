upstream dicomweb_proxy {
  # The keepalive parameter sets the maximum number of idle keepalive connections
  # to upstream servers that are preserved in the cache of each worker process. When
  # this number is exceeded, the least recently used connections are closed.
  keepalive 128;

  server ${DICOMWebProxy_url};
}

limit_conn_zone $server_name zone=servers:10m;

log_format compression '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" "$gzip_ratio", $http_X-Link-Authorization, $sent_http_X-Link-Authorization';

server {

    listen 8042;
    server_name ${server_name};

    limit_conn servers 1000;

    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";

    access_log            /var/log/nginx/access.log main;
    error_log             /var/log/nginx/error.log warn;

    client_max_body_size    20000M;
    proxy_send_timeout      120;
    proxy_read_timeout      120;
    proxy_request_buffering off;
    proxy_buffering         off;

    error_page 490 = @kheopsAuthorization;
    error_page 491 = @kheopsDICOMwebProxy;
    error_page 492 = @kheopsZipper;
        
    location ~ ^/wsi-viewer(/css/viewer.css|/css/viewer_nav.css|/js/viewer.js||/js/viewer-openseadragon-scalebar.js)$ {
      rewrite ^/wsi-viewer(.*)$ $1 break;
      proxy_pass http://wsiviewer:80;

      proxy_set_header    Host               $host;
      proxy_set_header    X-Real-IP          $remote_addr;
      proxy_set_header    X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header    X-Forwarded-Host   $host;
      proxy_set_header    X-Forwarded-Server $host;
      proxy_set_header    X-Forwarded-Port   $server_port;
      proxy_set_header    X-Forwarded-Proto  $scheme;
      proxy_buffer_size          128k;
      proxy_buffers              4 256k;
      proxy_busy_buffers_size    256k;
    }

    location /api {
      return 490; #kheopsAuthorization
    }

    # If we hit /studies exactly, we are dealing with a study level QIDO or STOW
    location = /api/studies {
      if ( $request_method = GET ) { return 490; } #kheopsAuthorization
      if ( $request_method = OPTIONS ) { return 490; } #kheopsAuthorization
      if ( $request_method = POST ) { return 491; } #kheopsDICOMwebProxy
    }

    # Anything with users is for the authorization server
    location  ~ ^/api/studies/([0-9.]+)/series/([0-9.]+)/users {
      return 490; #kheopsAuthorization
    }

    # Anything with albums is for the authorization server
    location  ~ ^/api/studies/([0-9.]+)/series/([0-9.]+)/albums {
      return 490; #kheopsAuthorization
    }

    # Instances goes to the DICOMWebProxy
    location  ~ ^/api/studies/([0-9.]+)/series/([0-9.]+)/instances$ {
      return 491; #kheopsDICOMwebProxy
    }

    # Frames goes to the DICOMWebProxy
    location  ~ ^/api/studies/([0-9.]+)/series/([0-9.]+)/instances/([0-9.]+)/frames/([0-9]+)$ {
      return 491; #kheopsDICOMwebProxy
    }

    # Metadata goes to the DICOMWebProxy
    location  ~ ^/api/studies/([0-9.]+)/series/([0-9.]+)/metadata$ {
      return 491; #kheopsDICOMwebProxy
    }

    # Bulkdata goes to the DICOMWebProxy
    location  ~ ^/api/studies/([0-9.]+)/series/([0-9.]+)/bulkdata/([a-fA-F0-9]+)$ {
      return 491; #kheopsDICOMwebProxy
    }

    # Metadata goes to the DICOMWebProxy
    location  ~ ^/api/studies/([0-9.]+)/series/([0-9.]+)/instances/([0-9.]+)/metadata$ {
      return 491; #kheopsDICOMwebProxy
    }

    # Dulkdata goes to the DICOMWebProxy
    location  ~ ^/api/studies/([0-9.]+)/series/([0-9.]+)/instances/([0-9.]+)/bulkdata/([a-fA-F0-9]+)$ {
      return 491; #kheopsDICOMwebProxy
    }

    # WADO and QIDO is for the dicomwebproxy, PUT and DELETE on the series is for the authorization server
    location  ~ ^/api/studies/([0-9.]+)/series/([0-9.]+) {
      if ( $request_method = GET ) { return 491; } #kheopsDICOMwebProxy
      if ( $request_method != GET ) { return 490; } #kheopsAuthorization
    }

    # series level QIDO is for the authorization server
    location  ~ ^/api/studies/([0-9.]+)/series$ {
      return 490; #kheopsAuthorization
    }

    # study level metadata requests are handled by the authorization server
    location  ~ ^/api/studies/([0-9.]+)/metadata$ {
      return 490; #kheopsAuthorization
    }

    # study level OHIF metadata requests are handled by the DICOMweb proxy
    location  ~ ^/api/studies/([0-9.]+)/ohifmetadata$ {
      return 491; #kheopsDICOMwebProxy
    }

    # series level instance QIDO requests are handled by the DICOMweb proxy
    location  ~ ^/api/studies/([0-9.]+)/instances$ {
      return 491; #kheopsDICOMwebProxy
    }

    # Anything with users is for the authorization server
    location  ~ ^/api/studies/([0-9.]+)/users {
      return 490; #kheopsAuthorization
    }

    # Anything with albums is for the authorization server
    location  ~ ^/api/studies/([0-9.]+)/albums {
      return 490; #kheopsAuthorization
    }

    # Anything with comments is for the authorization server
    location  ~ ^/api/studies/([0-9.]+)/comments {
      return 490; #kheopsAuthorization
    }

    # Anything with favorites is for the authorization server
    location  ~ ^/api/studies/([0-9.]+)/favorites {
      return 490; #kheopsAuthorization
    }

    # Anything with favorites is for the authorization server
    location  ~ ^/api/studies/([0-9.]+)/series/([0-9.]+)/favorites {
      return 490; #kheopsAuthorization
    }

    # STOW and WADO are for the kheopsDICOMwebProxy, ZIP is for the kheopsZipper, deleting a study or appropriate is for kheopsAuthorization
    location ~ ^/api/studies/[0-9.]+$ {
      if ( $request_method = PUT ) { return 490; } #kheopsAuthorization
      if ( $request_method = DELETE ) { return 490; } #kheopsAuthorization

      if ($http_accept ~ "application/zip") { return 492; } #kheopsZipper
      if ($arg_accept ~ "application/zip") { return 492; } #kheopsZipper
      if ($arg_accept ~ "application%2Fzip") { return 492; } #kheopsZipper

      return 491; #kheopsDICOMwebProxy
    }

    location  /api/wado {
      proxy_set_header Connection "";

      if ( $arg_requestType = "WADO" ) { return 491; } #kheopsDICOMwebProxy

      return 400 "requestType must be WADO";
    }

    location  /api/ohifservermetadata {
      return 491; #kheopsDICOMwebProxy
    }
    
    location /ohif {
      rewrite ^/ohif(.*)$ $1 break;
      proxy_pass          http://ohif:80;
      proxy_redirect      http://ohif:80 ${root_url}; 
    }      
#    location /viewer {
#      proxy_pass          http://ohif:80;
#      proxy_redirect      http://ohif:80 ${root_url}; 
#    }     

    location @kheopsAuthorization {
      proxy_set_header        Host $host;
      proxy_set_header        X-Real-IP $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header        X-Forwarded-Proto $scheme;

      rewrite ^/api(.*)$ /authorization$1 break;

      # Fix the “It appears that your reverse proxy set up is broken" error.
      proxy_pass          ${kheopsAuthorization_url};

      proxy_redirect      ${kheopsAuthorization_url} ${root_url};
    }

    location @kheopsDICOMwebProxy {
      proxy_set_header        Host $host;
      proxy_set_header        X-Real-IP $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header        X-Forwarded-Proto $scheme;

      rewrite ^/api(.*)$ /capabilities/password/dicomweb$1 break;

      # Fix the “It appears that your reverse proxy set up is broken" error.
      proxy_pass          http://dicomweb_proxy;

      proxy_redirect      http://dicomweb_proxy ${root_url};
    }

    location @kheopsZipper {
      proxy_set_header        Host $host;
      proxy_set_header        X-Real-IP $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header        X-Forwarded-Proto $scheme;

      rewrite ^/api(.*)$ /zipper$1 break;

      # Fix the “It appears that your reverse proxy set up is broken" error.
      proxy_pass          ${kheopsZipper_url};

      proxy_redirect      ${kheopsZipper_url} ${root_url};
    }

    location ~ ^/api/link/[a-zA-Z0-9.+=_-]* {
      proxy_set_header        Host $host;
      proxy_set_header        X-Real-IP $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header        X-Forwarded-Proto $scheme;

      proxy_set_header        Authorization "Bearer $2";
      proxy_set_header        X-Link-Authorization "true";

      rewrite ^/(api/link/)([a-zA-Z0-9.+=_-]*)(.*)$ /api$3 break;

      proxy_pass ${root_url}:8042;
    }

    location /api/testauthorizationproxy {
      proxy_set_header        Host $host;
      proxy_set_header        X-Real-IP $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header        X-Forwarded-Proto $scheme;

      rewrite ^/(api/testauthorizationproxy)(.*)$ $2 break;
      proxy_pass          ${kheopsAuthorizationProxy_url};

      proxy_redirect      ${kheopsAuthorizationProxy_url} ${root_url};
    }

    location / {
      proxy_set_header        Host $host;
      proxy_set_header        X-Real-IP $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header        X-Forwarded-Proto $scheme;

      # Fix the “It appears that your reverse proxy set up is broken" error.
      proxy_pass          ${kheopsWebUI_url};

      proxy_redirect      ${kheopsWebUI_url} ${root_url};
    }
}
